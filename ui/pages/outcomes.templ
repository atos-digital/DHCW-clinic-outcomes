package pages

import (
	"github.com/atos-digital/DHCW-clinic-outcomes/ui/components"
)

// type OutcomesData struct {
// 	ConsultationDate string `json:"consultation_date"`
// 	ConsultationTime string `json:"consultation_time"`
// 	ConsultationType string `json:"consultation_type"`
// 	Specialties      string `json:"specialties"`
// 	Clinicians       string `json:"clinicians"`
// 	OutcomesOption   string `json:"outcomes_option"`
// 	FollowUp         string `json:"follow_up"`
// }
templ Outcomes(data map[string]string) {
	<form
		hx-post="/hx/outcomes-form"
		hx-trigger="change"
		hx-swap="outerHTML"
		class="flex flex-col gap-4"
	>
		@OutcomesEventDetails(data)
		@OutcomesOptions(data)
		@OutcomesFollowUp()
		<div class="px-4">
			@components.LabelWrapper(
				components.DefaultLabel("Other information"), 
				components.TextArea("Add any other relevant information such as any outpatient procedures taken, or details of any tests required before next appointment."),
			)
		</div>
	</form>
}

var (
	consultationTypes = []string{
		"Telephone Consultation",
		"Video Consultation",
		"Face to face",
		"Office-based Decision",
	}
	specialties = []string{
		"Cardiology",
		"Dermatology",
		"Endocrinology",
		"Gastroenterology",
		"Geriatrics",
		"Hematology",
		"Infectious Disease",
		"Nephrology",
		"Neurology",
		"Oncology",
		"Pulmonology",
		"Rheumatology",
		"Urology",
	}
	clinicians = []string{"A", "B", "C"}
)

templ OutcomesEventDetailsSelect(name, label string, options []string, selected any) {
	<label class="flex flex-col">
		{ label }
		<select name={ name } class="dhcw-border p-1">
			for _, option := range options {
				<option selected?={ selected==option }>{ option }</option>
			}
		</select>
	</label>
}

templ OutcomesEventDetails(data map[string]string) {
	@components.SectionTitle("Enter Event Details")
	<div class="flex justify-between px-4">
		<label class="flex flex-col">
			Date
			<input type="date" name="consultation_date" class="dhcw-border" value={ data["consultation_date"] }/>
		</label>
		<label class="flex flex-col">
			Time
			<input type="time" name="consultation_time" class="dhcw-border" value={ data["consultation_time"] }/>
		</label>
		@OutcomesEventDetailsSelect("consultation_type", "Consultation Type", consultationTypes, data["consultation_type"])
		@OutcomesEventDetailsSelect("specialties", "Specialty", specialties, data["specialties"])
		@OutcomesEventDetailsSelect("clinicians", "Senior Responsible Clinician", clinicians, data["clinicians"])
	</div>
}

templ OutcomesOptionsCancer() {
	<div class="flex flex-col px-4">
		<label>
			<input type="checkbox" name="cancer-pathway" checked?={ components.IsChecked(ctx,"cancer-pathway","on") }/>
			Cancer Pathway
		</label>
		<div class={ "flex flex-col ml-4 my-1", templ.KV("hidden", !components.IsChecked(ctx,"cancer-pathway","on")) }>
			for _, v := range []string {"First Suspicion of Cancer", "Patient to remain on USC pathway", "Other"} {
				<label>
					<input type="radio" name="cancer-pathway-options" value={ v } checked?={ components.IsChecked(ctx,"cancer-pathway-options",v) }/>
					{ v }
				</label>
			}
			<div class="flex flex-col">
				<input
					type="text"
					class={ "dhcw-border shadow-inner px-2 py-0.5 w-1/3", templ.KV("hidden", !components.IsChecked(ctx,"cancer-pathway-options","Other")) }
					placeholder="Specify"
				/>
			</div>
		</div>
	</div>
}

templ OutcomesOptionsPatientRadioGroup(name, option, subname string, suboptions []string) {
	<label>
		<input type="radio" name={ name } value={ option } checked?={ components.IsChecked(ctx,name,option) }/>
		{ option }
	</label>
	<div class={ "flex flex-col ml-4 my-1", templ.KV("hidden", !components.IsChecked(ctx,name,option)) }>
		for _, v := range suboptions {
			<label>
				<input type="radio" name={ subname } value={ v } checked?={ components.IsChecked(ctx,subname,v) }/>
				{ v }
			</label>
		}
	</div>
}

templ OutcomesOptionsPatientText(name, option, placeholder string) {
	<label>
		<input type="radio" name={ name } value={ option } checked?={ components.IsChecked(ctx,name,option) }/>
		{ option }
	</label>
	<input class={ "dhcw-border shadow-inner px-2 py-0.5 w-2/3", templ.KV("hidden", !components.IsChecked(ctx,name,option)) } placeholder={ placeholder }/>
}

templ OutcomesOptionsPatientCheckbox(name, option, subname string, suboptions []string) {
	<label>
		<input type="radio" name={ name } value={ option } checked?={ components.IsChecked(ctx,name,option) }/>
		{ option }
	</label>
	<div class={ "flex flex-col ml-4 my-1", templ.KV("hidden", !components.IsChecked(ctx,name,option)) }>
		for _, v := range suboptions {
			<label>
				<input type="checkbox" name={ subname } value={ v } checked?={ components.IsChecked(ctx,subname,v) }/>
				{ v }
			</label>
		}
	</div>
}

templ OutcomesOptionsPatient(name string) {
	<div class="flex flex-col gap-6 px-4">
		<div class="grid grid-cols-2">
			<div class="flex flex-col">
				for _, v := range []string {"Patient Discharged", "See on Symptom", "Patient Initiated Follow Up"} {
					<label>
						<input type="radio" name={ name } value={ v } checked?={ components.IsChecked(ctx,name,v) }/>
						{ v }
					</label>
					if v == "See on Symptom" {
						<select class={ "dhcw-border p-1", templ.KV("hidden",!components.IsChecked(ctx,name,"See on Symptom") ) }>
							for _, option := range []string{"6 months", "12 months"} {
								<option>{ option }</option>
							}
						</select>
					}
				}
			</div>
			<div class="flex flex-col">
				@OutcomesOptionsPatientRadioGroup(name, "Did Not Answer", "did-not-answer", []string{ "Send for again", "Discharge" })
				@OutcomesOptionsPatientRadioGroup(name, "Did Not Attend", "did-not-attend", []string{ "Send for again", "Discharge" })
				@OutcomesOptionsPatientRadioGroup(name, "Could Not Attend", "could-not-attend", []string{ "Send for again", "Discharge" })
			</div>
		</div>
		<div class="flex flex-col">
			@OutcomesOptionsPatientText(name,"Refer to Diagnostics","Enter Diagnostic Test(s)")
			@OutcomesOptionsPatientText(name,"Refer to another consultant / specialty","Type in which consultant or specialty")
			@OutcomesOptionsPatientText(name,"Refer to Therapies","Type who to refer to")
			@OutcomesOptionsPatientCheckbox(name,"Refer to Treatment","refer-to-treatment",[]string{"SACT","Radiotherapy","Other"})
		</div>
		<div class="flex flex-col">
			for _, v := range []string{"Add to Daycare List", "Add to Inpatient List", "Awaiting Clinical Decision (i.e. MDT, test results)"} {
				<label>
					<input type="radio" name={ name } value={ v } checked?={ components.IsChecked(ctx,name,v) }/>
					{ v }
				</label>
			}
			@OutcomesOptionsPatientText(name,"Discuss at MDT","Which MDT (if known)?")
			@OutcomesOptionsPatientText(name,"Listed for Outpatient Procedure","Type in which procedure")
		</div>
		<label>
			<input type="radio" name={ name } value="Admit from Clinic / Consultation" checked?={ components.IsChecked(ctx,name,"Admit from Clinic / Consultation") }/>
			Admit from Clinic / Consultation
		</label>
	</div>
}

templ OutcomesOptions(data map[string]string) {
	<div class="flex flex-col gap-3">
		@components.SectionTitle("Outcomes")
		@OutcomesOptionsCancer()
		<hr/>
		@OutcomesOptionsPatient("outcomes_option")
	</div>
}

templ OutcomesFollowUp() {
	<div class="flex flex-col px-4 gap-3">
		<div>
			@components.CheckboxGroup("follow_up", []components.LabelOpts{{Label:"Follow Up", Required: true, Tooltip: "hi", Bold: true}})
		</div>
		<div class={ "flex flex-col border border-black p-4 gap-3", templ.KV("hidden", !components.IsChecked(ctx,"follow_up","Follow Up")) } id="followup-form">
			@components.LabelWrapper(
				components.RequiredLabel("Pathway"),
				components.RadioGroup("pathway", []components.LabelOpts{components.BoldLabel("Definitive Treatment given today (Clock stop)"), components.BoldLabel("Ongoing review")}),
			)
			<div class="grid grid-cols-2">
				<div class="flex flex-col gap-3">
					@components.LabelWrapper(
						components.RequiredLabel("To be seen under the same senior responsible clinician?"),
						components.RadioGroupWithTextbox(
							"same-clinician", 
							[]components.LabelOpts{
								components.DefaultLabel("Yes"), 
								components.DefaultLabel("No")}, 
							map[string]string{"No": "Specify"},
						),
					)
					<div>
						@components.Label(components.RequiredLabel("See in?"))
						<div class="flex gap-3">
							<input type="number" min="1" class="dhcw-border shadow-inner px-2 py-0.5 w-16"/>
							@components.Dropdown([]string{"Weeks", "Months", "Years"})
						</div>
					</div>
					@components.LabelWrapper(
						components.LabelOpts{Label: "Appointment Directive / Priority", Required: true, Tooltip: "Appointment Directive / Priority"},
						components.TextInput("Specify"),
					)
				</div>
				<div class="flex flex-col gap-3">
					@components.LabelWrapper(
						components.DefaultLabel("See in this clinic?"),
						components.RadioGroupWithTextbox(
							"same-clinic", 
							[]components.LabelOpts{
								components.DefaultLabel("Yes"), 
								components.DefaultLabel("No")}, 
							map[string]string{"No": "Specify"},
						),
					)
					@components.LabelWrapper(
						components.DefaultLabel("In which hospital?"),
						components.TextInput("Specify"),
					)
					@components.LabelWrapper(
						components.TooltipLabel("Clinical Condition","Clinical Condition"),
						components.TextInput("Enter if applicable"),
					)
				</div>
			</div>
			<hr class="border-black -mx-4 my-2"/>
			<div class="flex flex-col gap-3">
				@components.LabelWrapper(
					components.RequiredLabel("Patient's preferred consultation method"),
					components.RadioGroup("preferred-consultation-method", []components.LabelOpts{
						components.DefaultLabel("Face to face"), 
						components.DefaultLabel("Telephone"),
						components.DefaultLabel("Video"), 
						components.DefaultLabel("Clinical review (patient not required to attend)"),
					}),
				)
				@components.LabelWrapper(
					components.DefaultLabel("Does the patient require any tests before their FUP appointment?"),
					components.RadioGroup("preferred-consultation-method", []components.LabelOpts{
						components.DefaultLabel("Yes"), 
						components.DefaultLabel("No"),
					}),
				)
				<p class="font-semibold italic text-blue-600">
					This information is to help administrative colleagues with planning for clinic. It does not automatically generate a test request. The patient should not defer their appointment if the test cannot take place at the specified time.
				</p>
				<div class="flex flex-col items-center">
					@FollowupTest()
				</div>
			</div>
		</div>
	</div>
}

templ FollowupTest() {
	<div class="grid grid-cols-3 gap-4 w-full mb-2">
		@components.LabelWrapper(components.RequiredLabel("Test(s) required"), components.TextInput(""))
		@components.LabelWrapper(components.RequiredLabel("Undertaken by"), components.TextInput(""))
		@components.LabelWrapper(components.RequiredLabel("Test(s) required by"), 
			components.Dropdown([]string{"Day Prior to the Clinic", "Day of Clinic", "Other (Please Specify)"}),
		)
	</div>
	<button type="button" hx-get="/hx/add-followup-test" hx-swap="outerHTML">
		<img src="/assets/img/plus.svg" class="w-6 mt-5"/>
	</button>
}
