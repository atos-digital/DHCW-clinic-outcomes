package pages

import "github.com/atos-digital/DHCW-clinic-outcomes/ui"
import "github.com/atos-digital/DHCW-clinic-outcomes/ui/components"
import "github.com/atos-digital/DHCW-clinic-outcomes/ui/models"

var DefaultOutcomes = ui.Index(Outcomes())

templ Outcomes() {
	<div>
		@OutcomesEventDetails()
		<br/>
		@OutcomesOptions()
		<br/>
		@OutcomesFollowUp()
		<br/>
		<div class="px-4">
			@components.TextArea("Other information", "Add any other relevant information such as any outpatient procedures taken, or details of any tests required before next appointment.")
		</div>
	</div>
}

templ OutcomesEventDetails() {
	<div>
		<h1 class="text-lg font-semibold bg-sky-800 text-white px-4 py-1 mb-2">
			Enter Event Details
		</h1>
		<div class="flex space-x-8 items-end px-4">
			@components.DateInput("Date")
			@components.TimeInput("Time")
			@components.Dropdown("Consultation Type", []string{"Telephone Consultation", "Video Consultation", "Face-to-face", "Office-based Decision"})
			@components.Dropdown("Specialty", []string{"Cardiology", "Dermatology", "Endocrinology", "Gastroenterology", "Geriatrics", "Hematology", "Infectious Disease", "Nephrology", "Neurology", "Oncology", "Pulmonology", "Rheumatology", "Urology"})
			@components.Dropdown("Senior Responsible Clinician", []string{"A", "B", "C"})
		</div>
	</div>
}

templ OutcomesOptions() {
	<div
		id="outcomes-options"
		hx-get="/hx/outcomes-options-radio"
		hx-trigger="change from:input[name='outcomes-option']"
		hx-include="#outcomes-options"
		hx-swap="outerHTML"
	>
		<h1 class="text-lg font-semibold bg-sky-800 text-white px-4 py-1 mb-4">
			Outcome
		</h1>
		<div class="grid grid-cols-2">
			<div class="flex flex-col px-4">
				@OutcomesOptionsRadioGroup("","outcomes-option", []OutcomesOptionsRadio{
				{"Patient Discharged",nil},
				{"See on Symptom",components.Dropdown(components.CreateFollowupLabel("See on Symptom"),[]string{"6 months", "12 months"})},
				{"Patient Initiated Follow Up",nil}})
			</div>
			<div class="flex flex-col px-4">
				@OutcomesOptionsRadioGroup("","outcomes-option", []OutcomesOptionsRadio{
				{"Did Not Answer",nil},
				{"Did Not Attend",components.RadioGroup("",components.CreateFollowupLabel("Did Not Attend"), []string{"Send for again", "Discharge"})},
				{"Could Not Attend",nil}})
			</div>
		</div>
		<br/>
		<div class="flex flex-col px-4">
			@OutcomesOptionsRadioGroup("","outcomes-option", []OutcomesOptionsRadio{
				{"Refer to Diagnostics",nil},
				{"Refer to another consultant / specialty",nil},
				{"Refer to Therapies",components.TextInput(components.CreateFollowupLabel("Refer to Therapies"),"Type who to refer to")},
				{"Refer to Treatment",nil}})
		</div>
		<br/>
		<div class="flex flex-col px-4">
			@OutcomesOptionsRadioGroup("","outcomes-option", []OutcomesOptionsRadio{
				{"Add to Daycare List",nil},
				{"Add to Inpatient List",nil},
				{"Awaiting Clinical Decision (i.e. MDT, test results)",nil},
				{"Discuss at MDT",components.TextInput(components.CreateFollowupLabel("Discuss at MDT"),"Which MDT (if known)?")},
				{"Listed for Outpatient Procedure",nil}})
		</div>
		<br/>
		<div class="flex flex-col px-4">
			@OutcomesOptionsRadioGroup("","outcomes-option", []OutcomesOptionsRadio{
				{"Admit from Clinic / Consultation",nil}})
		</div>
	</div>
}

templ OutcomesFollowUp() {
	<div class="">
		<div class="flex flex-col px-4">
			@components.Checkbox(models.Label{Qn:"Follow Up", Required:true, Tooltip:"hi", Style:"font-bold"}, nil)
		</div>
	</div>
}

type OutcomesOptionsRadio struct {
	label    string
	followUp templ.Component
}

templ OutcomesOptionsRadioGroup(label, groupName string, options []OutcomesOptionsRadio) {
	<div>
		if label != "" {
			<label>{ label }</label>
		}
		for _, option := range options {
			<div class="gap-x-5">
				<div>
					<input
						_={ "on input toggle .hidden on #" + components.CreateFollowupLabel(label) }
						type="radio"
						name={ groupName }
						value={ option.label }
						if components.Checked(ctx, groupName, option.label) {
							checked
						}
					/>
					<label for={ option.label }>
						{ option.label }
					</label>
				</div>
				if option.followUp != nil && components.Checked(ctx, groupName, option.label) {
					<div id={ components.CreateFollowupLabel(option.label) } class="ml-4 my-1">
						@option.followUp
					</div>
				}
			</div>
		}
	</div>
}
