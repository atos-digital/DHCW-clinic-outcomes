package pages

import (
	"github.com/atos-digital/DHCW-clinic-outcomes/ui"
	"github.com/atos-digital/DHCW-clinic-outcomes/ui/components"
)

var DefaultOutcomes = ui.Index(Outcomes())

templ SectionTitle(title string) {
	<h1 class="text-lg font-semibold bg-sky-800 text-white px-4 py-1">
		{ title }
	</h1>
}

templ Outcomes() {
	<div class="flex flex-col gap-4">
		@OutcomesEventDetails()
		@OutcomesOptions()
		@OutcomesFollowUp()
		<div class="px-4">
			@components.TextArea("Other information", "Add any other relevant information such as any outpatient procedures taken, or details of any tests required before next appointment.")
		</div>
	</div>
}

var consultationTypes = []string{
	"Telephone Consultation",
	"Video Consultation",
	"Face-to-face",
	"Office-based Decision",
}

var specialties = []string{
	"Cardiology",
	"Dermatology",
	"Endocrinology",
	"Gastroenterology",
	"Geriatrics",
	"Hematology",
	"Infectious Disease",
	"Nephrology",
	"Neurology",
	"Oncology",
	"Pulmonology",
	"Rheumatology",
	"Urology",
}

var clinicians = []string{"A", "B", "C"}

templ outcomeEventDropDown(label, name string, options []string) {
	<div class="flex flex-col">
		<label for={ name }>{ label }</label>
		<select id={ name } name={ name } class="border-gray-300 border rounded p-1">
			for _, option := range options {
				<option>{ option }</option>
			}
		</select>
	</div>
}

templ OutcomesEventDetails() {
	@SectionTitle("Enter Event Details")
	<div class="flex justify-between px-4">
		<div class="flex flex-col">
			<label for="consultation-date">Date</label>
			<input type="date" name="consultation-date" class="border-gray-300 border rounded"/>
		</div>
		<div class="flex flex-col">
			<label for="consultation-time">Time</label>
			<input type="time" name="consultation-time" class="border-gray-300 border rounded"/>
		</div>
		@outcomeEventDropDown("Consultation Type", "consultation-type", consultationTypes)
		@outcomeEventDropDown("Specialty", "specialty" , specialties)
		@outcomeEventDropDown("Senior Responsible Clinician", "senior-responsible-clinician", clinicians)
	</div>
}

templ OutcomesOptions() {
	<div
		id="outcomes-options"
		hx-get="/hx/outcomes-options-radio"
		hx-trigger="change from:input[name='outcomes-option']"
		hx-include="#outcomes-options"
		hx-swap="outerHTML"
	>
		@SectionTitle("Outcomes")
		<div class="flex flex-col gap-6 px-4">
			<div class="grid grid-cols-2">
				<div class="flex flex-col">
					@OutcomesOptionsRadioGroup("","outcomes-option", []OutcomesOptionsRadio{
				{"Patient Discharged",nil},
				{"See on Symptom",components.Dropdown([]string{"6 months", "12 months"})},
				{"Patient Initiated Follow Up",nil}})
				</div>
				<div class="flex flex-col">
					@OutcomesOptionsRadioGroup("","outcomes-option", []OutcomesOptionsRadio{
				{"Did Not Answer",nil},
				{"Did Not Attend",components.RadioGroup("",components.CreateFollowupLabel("Did Not Attend"), []string{"Send for again", "Discharge"})},
				{"Could Not Attend",nil}})
				</div>
			</div>
			<div class="flex flex-col">
				@OutcomesOptionsRadioGroup("","outcomes-option", []OutcomesOptionsRadio{
				{"Refer to Diagnostics",nil},
				{"Refer to another consultant / specialty",nil},
				{"Refer to Therapies",components.TextInput(components.CreateFollowupLabel("Refer to Therapies"),"Type who to refer to")},
				{"Refer to Treatment",nil}})
			</div>
			<div class="flex flex-col">
				@OutcomesOptionsRadioGroup("","outcomes-option", []OutcomesOptionsRadio{
				{"Add to Daycare List",nil},
				{"Add to Inpatient List",nil},
				{"Awaiting Clinical Decision (i.e. MDT, test results)",nil},
				{"Discuss at MDT",components.TextInput(components.CreateFollowupLabel("Discuss at MDT"),"Which MDT (if known)?")},
				{"Listed for Outpatient Procedure",nil}})
			</div>
			<div class="flex flex-col">
				@OutcomesOptionsRadioGroup("","outcomes-option", []OutcomesOptionsRadio{
				{"Admit from Clinic / Consultation",nil}})
			</div>
		</div>
	</div>
}

templ OutcomesFollowUp() {
	<div class="flex flex-col px-4">
		@components.CheckboxGroup("", "follow-up", []components.LabelOpts{{Label: "Follow Up", Required: true, Tooltip: "hi", Style:  "font-bold"}})
	</div>
}

type OutcomesOptionsRadio struct {
	label    string
	followUp templ.Component
}

templ OutcomesOptionsRadioGroup(label, groupName string, options []OutcomesOptionsRadio) {
	<div>
		for _, option := range options {
			<label>
				<input
					_={ "on input toggle .hidden on next <div/>" }
					type="radio"
					name={ groupName }
					value={ option.label }
					if components.IsChecked(ctx, groupName, option.label) {
						checked
					}
				/>
				{ option.label }
			</label>
			<div class="">
				if option.followUp != nil && components.IsChecked(ctx, groupName, option.label) {
					<div class="ml-4 my-1">
						@option.followUp
					</div>
				}
			</div>
		}
	</div>
}
