// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.513
package components

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

func Radio(text, name string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, templ_7745c5c3_W io.Writer) (templ_7745c5c3_Err error) {
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templ_7745c5c3_W.(*bytes.Buffer)
		if !templ_7745c5c3_IsBuffer {
			templ_7745c5c3_Buffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templ_7745c5c3_Buffer)
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<label><input type=\"radio\" name=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(name))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(text))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if IsChecked(ctx, name, text) {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(" checked")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(text)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `ui/components/radio.templ`, Line: 5, Col: 8}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</label>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templ_7745c5c3_Var1.Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if !templ_7745c5c3_IsBuffer {
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteTo(templ_7745c5c3_W)
		}
		return templ_7745c5c3_Err
	})
}

// templ RadioGroup(groupName string, options []LabelOpts) {
// 	<div
// 		class="flex flex-col"
// 	>
// 		for _, option := range options {
// 			<label class={ templ.KV("font-bold", option.Bold) }>
// 				<input
// 					type="radio"
// 					name={ groupName }
// 					value={ option.Label }
// 					checked?={ IsChecked(ctx, groupName, option.Label) }
// 				/>
// 				if option.Required {
// 					{ option.Label }<span class="text-red-500">*</span>
// 				} else {
// 					{ option.Label }
// 				}
// 				if option.Tooltip != "" {
// 					<span class="relative group">
// 						<span id="tooltip" class="invisible group-hover:visible absolute rounded shadow-lg px-2 py-1 bg-gray-100 text-black font-normal ml-1 w-52 transform -translate-y-full">Tooltip</span>
// 						<img src="/assets/img/tooltip.svg" class="w-4 inline-block"/>
// 					</span>
// 				}
// 			</label>
// 		}
// 	</div>
// }

// templ RadioGroupWithTextbox(groupName string, options []LabelOpts, withTextbox map[string]string) {
// 	<div class="flex flex-col">
// 		for _, option := range options {
// 			<label class={ templ.KV("font-bold", option.Bold) }>
// 				<input
// 					type="radio"
// 					name={ groupName }
// 					value={ option.Label }
// 					checked?={ IsChecked(ctx, groupName, option.Label) }
// 				/>
// 				if option.Required {
// 					{ option.Label }<span class="text-red-500">*</span>
// 				} else {
// 					{ option.Label }
// 				}
// 				if option.Tooltip != "" {
// 					<span class="relative group">
// 						<span id="tooltip" class="invisible group-hover:visible absolute rounded shadow-lg px-2 py-1 bg-gray-100 text-black font-normal ml-1 w-52 transform -translate-y-full">Tooltip</span>
// 						<img src="/assets/img/tooltip.svg" class="w-4 inline-block"/>
// 					</span>
// 				}
// 				if  withTextbox[option.Label] != "" {
// 					<div
// 						class={ "flex","flex-col", templ.KV("hidden",!IsChecked(ctx, groupName, option.Label)) }
// 					>
// 						<input type="text" class="dhcw-border shadow-inner px-2 py-0.5 w-1/3" placeholder={ withTextbox[option.Label] }/>
// 					</div>
// 				}
// 			</label>
// 		}
// 	</div>
// }
